# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

#   Allows you to run this workflow manually from the Actions tab
#   workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: build
        run: |
          #make bvn
          rm -rf .git
          rm -rf .github
          rm -rf vendorBuilder
          rm -rf node_modules
          rm -rf tests
          rm -rf views/js/node_modules
          rm -rf deploy
          rm -rf cypress
          rm -rf .docker
          mkdir mollie
          rsync -Rr ./ ./mollie
          shopt -s extglob
          rm -r !(mollie)
          find . -maxdepth 1 -type f -exec rm "{}" \;
          cd mollie && rm -rf mollie
      - name: Archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          name: mollie
          path: |
            .
   
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

#       # Runs a single command using the runners shell
#       - name: Run 1
#         run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Initializing the Prestashop
        run: |
          docker network create prestashop-net
          docker run -ti --name some-mysql --network prestashop-net -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=prestashop -p 3307:3306 -d mysql:5.7
          docker run -ti -v $PWD:/var/www/html/modules/mollie --name some-prestashop --network prestashop-net -e DB_SERVER=some-mysql -e PS_INSTALL_AUTO=1 -e DB_NAME=prestashop -e PS_FOLDER_ADMIN=admin1 -e PS_DEV_MODE=1 -e PS_ENABLE_SSL=1 -p 8080:80 -d prestashop/prestashop:latest
          sleep 2m

      # - name: Ngrok TCP Tunelling
      #   run: |
      #     curl -L https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip -o ngrok.zip
      #     unzip -o ngrok.zip
      #     chmod +x ngrok
      #     ./ngrok authtoken 1t4LBUDGsUGyb2exaneZbzUvbCM_6GYbneg25YDNHMwfGNRRk
      #     ./ngrok http 8080

      - name: Installing the latest module to the Prestashop
        run: |
          # installing module
          docker exec -i some-prestashop sh -c "cd / && chmod -R 777 var"
          docker exec -i some-prestashop sh -c "cd /var/www/html && php  bin/console prestashop:module install mollie"
          
      - name: Running the E2E tests on Docker (PS + Cypress)
        run: |
          docker exec -i some-prestashop sh -c "cd / && chmod -R 777 var"
          npm ci
          npx cypress run
        
      - name: Archive videos and screenshots
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: videos_screenshots
          retention-days: 5
          path: |
            cypress/videos
            cypress/screenshots

     # - name: Run04
     #   run: docker-compose -f docker-compose.e2e.yml up
